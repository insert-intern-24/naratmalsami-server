name: naraback Docker 이미지 빌드 및 배포

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v2

      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: galbimandu/naraback:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install cloudflared
        run: |
          # Download and install cloudflared
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/
      
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Create SSH config to use cloudflared as proxy
          echo "Host ${{ secrets.REMOTE_HOST }}" > ~/.ssh/config
          echo "  ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "  User ${{ secrets.REMOTE_USER }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
      
      - name: Deploy via Cloudflare Zero Trust
        run: |
          # Test SSH connection
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "echo 'Connection successful!'"
          
          # Run deployment commands
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            echo "최신 Docker 이미지를 Pull합니다..."
            docker pull galbimandu/naraback:latest
            echo "기존 컨테이너가 있다면 중지 및 삭제합니다..."
            docker stop naraback-container || true
            docker rm naraback-container || true
            # Add additional deployment commands here as needed
          EOF
